#!/bin/bash

# Dokploy MCP Server Deployment Script
# This script helps automate the deployment of the secure MCP server using Dokploy

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to generate API key
generate_api_key() {
    if command_exists python3; then
        python3 -c "import secrets; print(secrets.token_urlsafe(32))"
    elif command_exists python; then
        python -c "import secrets; print(secrets.token_urlsafe(32))"
    else
        # Fallback to openssl if Python is not available
        openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
    fi
}

# Main deployment function
main() {
    echo "=================================================="
    echo "🚀 Secure MCP Server - Dokploy Deployment Setup"
    echo "=================================================="
    echo

    # Check prerequisites
    print_status "Checking prerequisites..."
    
    if ! command_exists git; then
        print_error "Git is not installed. Please install Git first."
        exit 1
    fi
    
    if ! command_exists curl; then
        print_error "curl is not installed. Please install curl first."
        exit 1
    fi
    
    print_success "Prerequisites check passed!"
    echo

    # Get deployment configuration
    echo "📋 Deployment Configuration"
    echo "=========================="
    
    read -p "Enter your VPS IP address: " VPS_IP
    read -p "Enter your domain name (optional, press enter to skip): " DOMAIN
    read -p "Enter your Git repository URL: " GIT_REPO
    
    echo

    # Generate API keys
    print_status "Generating secure API keys..."
    
    API_KEY1=$(generate_api_key)
    API_KEY2=$(generate_api_key)
    
    print_success "Generated API keys:"
    echo "  Key 1: $API_KEY1"
    echo "  Key 2: $API_KEY2"
    echo
    print_warning "⚠️  IMPORTANT: Save these API keys securely!"
    echo

    # Create environment file
    print_status "Creating environment configuration..."
    
    # Create the env directory if it doesn't exist
    mkdir -p deployment/env
    
    cat > deployment/env/.env.production << EOF
# Generated by Dokploy deployment script
# Date: $(date)

# MCP Server Configuration
MCP_API_KEYS=$API_KEY1,$API_KEY2
PORT=8443
MCP_LOG_LEVEL=INFO
MCP_ENABLE_MONITORING=true

# Python Configuration
PYTHONUNBUFFERED=1
PYTHONDONTWRITEBYTECODE=1
PYTHONOPTIMIZE=1
EOF

    print_success "Environment configuration created: deployment/env/.env.production"
    echo

    # Create deployment instructions
    print_status "Creating deployment instructions..."
    
    # Create the docs/deployment directory if it doesn't exist
    mkdir -p docs/deployment
    
    cat > docs/deployment/DEPLOYMENT_INSTRUCTIONS.md << EOF
# Dokploy Deployment Instructions

## Generated Configuration

**VPS IP:** $VPS_IP
**Domain:** ${DOMAIN:-"Not provided (will use IP)"}
**Git Repository:** $GIT_REPO

## API Keys
\`\`\`
Key 1: $API_KEY1
Key 2: $API_KEY2
\`\`\`

## Step-by-Step Deployment

### 1. VPS Setup
\`\`\`bash
# Connect to your VPS
ssh root@$VPS_IP

# Install Dokploy
curl -sSL https://dokploy.com/install.sh | sh
\`\`\`

### 2. Access Dokploy
- Open browser to: http://$VPS_IP:3000
$(if [ -n "$DOMAIN" ]; then echo "- Or use domain: http://dokploy.$DOMAIN"; fi)

### 3. Create Application
1. Click "Create Project" → "Application"
2. Application Name: \`secure-mcp-server\`
3. Source: Git Repository
4. Repository URL: \`$GIT_REPO\`
5. Branch: \`main\`
6. Dockerfile: \`Dockerfile.production\`

### 4. Environment Variables
Add these in Dokploy environment settings:
\`\`\`
MCP_API_KEYS=$API_KEY1,$API_KEY2
PORT=8443
MCP_LOG_LEVEL=INFO
MCP_ENABLE_MONITORING=true
PYTHONUNBUFFERED=1
\`\`\`

### 5. Domain Configuration
$(if [ -n "$DOMAIN" ]; then
echo "- Domain: mcp.$DOMAIN"
echo "- Enable SSL: Yes"
else
echo "- Use IP: $VPS_IP:8443"
echo "- Note: Consider getting a domain for SSL"
fi)

### 6. Deploy
1. Click "Deploy" button
2. Monitor deployment logs
3. Wait for successful completion

### 7. Test Deployment
\`\`\`bash
# Health check
$(if [ -n "$DOMAIN" ]; then
echo "curl https://mcp.$DOMAIN/health"
else
echo "curl http://$VPS_IP:8443/health"
fi)

# Authentication test
$(if [ -n "$DOMAIN" ]; then
echo "curl -H \"Authorization: Bearer $API_KEY1\" https://mcp.$DOMAIN/api/tools"
else
echo "curl -H \"Authorization: Bearer $API_KEY1\" http://$VPS_IP:8443/api/tools"
fi)
\`\`\`

## Security Notes
- ✅ API keys are required for all MCP endpoints
- ✅ Rate limiting: 100 requests/minute per IP
- ✅ Health check endpoint is public (no auth required)
- ⚠️  Keep API keys secure and rotate regularly

## Support
- Full documentation: DOKPLOY_DEPLOYMENT_GUIDE.md
- Troubleshooting: Check Dokploy dashboard logs
- Security testing: Run test_secure_client.py after deployment
EOF

    print_success "Deployment instructions created: docs/deployment/DEPLOYMENT_INSTRUCTIONS.md"
    echo

    # Create quick test script
    print_status "Creating test script..."
    
    # Create the scripts directory if it doesn't exist
    mkdir -p scripts
    
    cat > scripts/test_deployment.sh << 'EOF'
#!/bin/bash

# Quick deployment test script

if [ $# -eq 0 ]; then
    echo "Usage: $0 <server-url> [api-key]"
    echo "Example: $0 https://mcp.yourdomain.com your-api-key"
    exit 1
fi

SERVER_URL=$1
API_KEY=${2:-""}

echo "Testing deployment at: $SERVER_URL"
echo

# Test health check
echo "🏥 Testing health check..."
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$SERVER_URL/health")
if [ "$HTTP_CODE" = "200" ]; then
    echo "✅ Health check passed (HTTP $HTTP_CODE)"
else
    echo "❌ Health check failed (HTTP $HTTP_CODE)"
    exit 1
fi

# Test authentication if API key provided
if [ -n "$API_KEY" ]; then
    echo "🔐 Testing authentication..."
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
        -H "Authorization: Bearer $API_KEY" \
        "$SERVER_URL/api/tools")
    
    if [ "$HTTP_CODE" = "200" ]; then
        echo "✅ Authentication test passed (HTTP $HTTP_CODE)"
    else
        echo "❌ Authentication test failed (HTTP $HTTP_CODE)"
        exit 1
    fi
    
    # Test MCP protocol
    echo "🔧 Testing MCP protocol..."
    RESPONSE=$(curl -s \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $API_KEY" \
        -d '{"jsonrpc":"2.0","id":"1","method":"tools/list"}' \
        "$SERVER_URL/mcp")
    
    if echo "$RESPONSE" | grep -q '"tools"'; then
        echo "✅ MCP protocol test passed"
        echo "📊 Available tools:"
        echo "$RESPONSE" | python3 -m json.tool 2>/dev/null | grep '"name"' || echo "$RESPONSE"
    else
        echo "❌ MCP protocol test failed"
        echo "Response: $RESPONSE"
        exit 1
    fi
else
    echo "⚠️  No API key provided, skipping authentication tests"
fi

echo
echo "🎉 Deployment test completed successfully!"
EOF

    chmod +x scripts/test_deployment.sh
    print_success "Test script created: scripts/test_deployment.sh"
    echo

    # Summary
    echo "✅ Deployment Setup Complete!"
    echo "============================"
    echo
    print_success "Generated files:"
    echo "  📄 deployment/env/.env.production - Environment variables"
    echo "  📄 docs/deployment/DEPLOYMENT_INSTRUCTIONS.md - Step-by-step guide"
    echo "  📄 scripts/test_deployment.sh - Deployment testing script"
    echo
    print_warning "Next steps:"
    echo "  1. Push all files to your Git repository"
    echo "  2. Set up your VPS with Dokploy"
    echo "  3. Follow docs/deployment/DEPLOYMENT_INSTRUCTIONS.md"
    echo "  4. Test with: ./scripts/test_deployment.sh <your-server-url> <api-key>"
    echo
    print_warning "Important reminders:"
    echo "  🔑 Save your API keys securely"
    echo "  🌐 Configure DNS if using a custom domain"
    echo "  🔒 Test authentication after deployment"
    echo "  📊 Monitor application logs in Dokploy dashboard"
}

# Run main function
main "$@"
